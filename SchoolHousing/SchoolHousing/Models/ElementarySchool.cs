// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ElementarySchoolResponse;
//
//    var elementarySchool = ElementarySchool.FromJson(jsonString);

namespace ElementarySchoolResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ElementarySchool
    {
        [JsonProperty("school_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SchoolId { get; set; }

        [JsonProperty("name_of_school")]
        public string NameOfSchool { get; set; }

        [JsonProperty("street_address")]
        public string StreetAddress { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("zip_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ZipCode { get; set; }

        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }

        [JsonProperty("website")]
        public Uri Website { get; set; }

        [JsonProperty("cps_performance_policy_level")]
        public string CpsPerformancePolicyLevel { get; set; }

        [JsonProperty("cps_performance_policy_status")]
        public string CpsPerformancePolicyStatus { get; set; }

        [JsonProperty("my_voice_my_school_overall_rating")]
        public string MyVoiceMySchoolOverallRating { get; set; }

        [JsonProperty("student_response_rate")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StudentResponseRate { get; set; }

        [JsonProperty("teacher_response_rate")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TeacherResponseRate { get; set; }

        [JsonProperty("involved_family")]
        public string InvolvedFamily { get; set; }

        [JsonProperty("supportive_environment")]
        public string SupportiveEnvironment { get; set; }

        [JsonProperty("ambitious_instruction")]
        public string AmbitiousInstruction { get; set; }

        [JsonProperty("effective_leaders")]
        public string EffectiveLeaders { get; set; }

        [JsonProperty("collaborative_teachers")]
        public string CollaborativeTeachers { get; set; }

        [JsonProperty("safe")]
        public string Safe { get; set; }

        [JsonProperty("school_community")]
        public string SchoolCommunity { get; set; }

        [JsonProperty("parent_teacher_partnership")]
        public string ParentTeacherPartnership { get; set; }

        [JsonProperty("quality_of_facilities")]
        public string QualityOfFacilities { get; set; }

        [JsonProperty("healthy_schools_certification")]
        public string HealthySchoolsCertification { get; set; }

        [JsonProperty("creative_schools_certification")]
        public string CreativeSchoolsCertification { get; set; }

        [JsonProperty("student_attendance_percentage_2013")]
        public string StudentAttendancePercentage2013 { get; set; }

        [JsonProperty("student_attendance_percentage_2012")]
        public string StudentAttendancePercentage2012 { get; set; }

        [JsonProperty("x_coordinate")]
        public string XCoordinate { get; set; }

        [JsonProperty("y_coordinate")]
        public string YCoordinate { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }

        [JsonProperty("latitude")]
        public string Latitude { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("latitude")]
        public string Latitude { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }
    }

    public partial class ElementarySchool
    {
        public static List<ElementarySchool> FromJson(string json) => JsonConvert.DeserializeObject<List<ElementarySchool>>(json, ElementarySchoolResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<ElementarySchool> self) => JsonConvert.SerializeObject(self, ElementarySchoolResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}